[tool.poetry]
name = "ellma"
version = "0.1.14"
description = "Evolutionary Local LLM Agent - Self-improving AI assistant"
authors = ["Tom Sapletta <info@softreck.dev>"]
maintainers = ["WRONAI Team <contact@wronai.dev>"]
license = "Apache-2.0"
readme = "README.md"
packages = [{include = "ellma"}]

[tool.poetry.dependencies]
python = "^3.8"
click = "^8.0.0"
pyyaml = "^6.0"
requests = "^2.28.0"
rich = "^13.0.0"
jinja2 = "^3.1.0"
psutil = "^5.9.0"
llama-cpp-python = "^0.2.0"
numpy = "^1.21.0"
prompt-toolkit = "^3.0.0"
# Security and dependency management
importlib-metadata = {version = "^6.0.0", python = "<3.8"}  # For Python 3.7 compatibility
packaging = "^21.0"  # For version parsing
pkg-resources = "^0.0.0"  # For dependency management

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/wronai/ellma/issues"
Changelog = "https://github.com/wronai/ellma/blob/main/CHANGELOG.md"
Homepage = "https://github.com/wronai/ellma"
Documentation = "https://wronai.github.io/ellma"
Repository = "https://github.com/wronai/ellma.git"
Source = "https://github.com/wronai/ellma"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.extras]
security = [
    "cryptography>=41.0.0",
    "PyJWT>=2.4.0"
]

# Security configuration
[tool.bandit]
targets = ["ellma"]
recursive = true
skips = ["B101", "B104"]  # Skip assert_used and hardcoded_bind_all_interfaces

[tool.safety]
# Ignore known vulnerabilities in test dependencies
ignore = [
    "51457",  # py
    "44715",  # pyyaml
    "51668"   # numpy
]

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-asyncio = "^0.20.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
black = "^22.0.0"
flake8 = "^5.0.0"
flake8-bugbear = "^23.0.0"
flake8-docstrings = "^1.7.0"
flake8-import-order = "^0.18.2"
mypy = "^0.991"
pre-commit = "^2.20.0"
safety = "^2.3.0"  # For security scanning
bandit = "^1.7.0"  # For security scanning
sphinx = "^7.0.0"
sphinx-rtd-theme = "^1.2.0"
sphinx-autodoc-typehints = "^1.22.0"
myst-parser = "^2.0.0"
sphinx-copybutton = "^0.5.0"
sphinxcontrib-mermaid = "^0.8.0"
sphinx-autobuild = "^2021.3.14"
# Development tools
tox = "^4.0.0"
invoke = "^2.0.0"
pip-tools = "^6.0.0"
# For security module
cryptography = "^41.0.0"
PyJWT = "^2.4.0"

[tool.poetry.group.web.dependencies]
fastapi = "^0.100.0"
uvicorn = {extras = ["standard"], version = "^0.23.0"}
websockets = "^11.0.0"
aiofiles = "^23.0.0"

[tool.poetry.group.audio.dependencies]
sounddevice = "^0.4.0"
scipy = "^1.9.0"
librosa = "^0.10.0"
whisper = "^1.0.0"

[tool.poetry.group.full.dependencies]
docker = "^6.0.0"
paramiko = "^3.0.0"
beautifulsoup4 = "^4.11.0"

[tool.poetry.scripts]
ellma = "ellma.cli.main:cli"
ellma-shell = "ellma.cli.shell:interactive_shell"
ellma-evolve = "ellma.core.evolution:evolve_cli"
ellma-secure = "ellma.secure_executor:main"

[project.scripts]
ellma-secure = "ellma.secure_executor:main"


[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true

# Ignore missing imports for optional dependencies
[[tool.mypy.overrides]]
module = [
    "pytest",
    "pytest_cov",
    "pytest_mock",
    "sphinx",
    "sphinx_rtd_theme",
    "myst_parser",
    "sphinx_autodoc_typehints",
    "sphinx_copybutton",
    "sphinxcontrib.mermaid",
    "sphinx_autobuild",
    "fastapi",
    "uvicorn",
    "websockets",
    "aiofiles",
    "sounddevice",
    "scipy",
    "librosa",
    "whisper",
    "docker",
    "paramiko",
    "beautifulsoup4"
]
ignore_missing_imports = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["ellma"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".tox",
    ".venv",
    "*.egg-info"
]

[tool.pylint.messages_control]
disable = [
    "C0103",  # invalid-name
    "C0114",  # missing-module-docstring
    "R0903",  # too-few-public-methods
]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101"]

[tool.ruff.isort]
known-first-party = ["ellma"]