[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "ellma"
version = "0.1.9"
description = "Evolutionary Local LLM Agent - Self-improving AI assistant"
authors = [
    {name = "Tom Sapletta", email = "info@softreck.dev"}
]
maintainers = [
    {name = "WRONAI Team", email = "contact@wronai.dev"}
]
license = "Apache-2.0"
readme = "README.md"

keywords = ["llm", "ai", "agent", "automation", "evolution", "mistral", "local-ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Systems Administration",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Natural Language :: English",
]
requires-python = ">=3.8"


dependencies = [
    "click>=8.0.0",
    "pyyaml>=6.0",
    "requests>=2.28.0",
    "rich>=13.0.0",
    "jinja2>=3.1.0",
    "psutil>=5.9.0",
    "llama-cpp-python>=0.2.0",
    "numpy>=1.21.0",
    "prompt-toolkit>=3.0.0",
]

[project.urls]
"Bug Tracker" = "https://github.com/wronai/ellma/issues"
Changelog = "https://github.com/wronai/ellma/blob/main/CHANGELOG.md"
Homepage = "https://github.com/wronai/ellma"
Documentation = "https://wronai.github.io/ellma"
Repository = "https://github.com/wronai/ellma.git"
Source = "https://github.com/wronai/ellma"

[project.optional-dependencies]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.22.0",
    "myst-parser>=1.0.0",
    "sphinx-copybutton>=0.5.0",
    "sphinxcontrib-mermaid>=0.8.0",
    "sphinx-autobuild>=2021.3.14"
]

dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.20.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]
web = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "websockets>=11.0.0",
    "aiofiles>=23.0.0",
]
audio = [
    "sounddevice>=0.4.0",
    "scipy>=1.9.0",
    "librosa>=0.10.0",
    "whisper>=1.0.0",
]
full = [
    "docker>=6.0.0",
    "paramiko>=3.0.0",
    "beautifulsoup4>=4.11.0",
    # Note: web and audio dependencies are already included separately
]

[project.scripts]
ellma = "ellma.cli.main:cli"
ellma-shell = "ellma.cli.shell:interactive_shell"
ellma-evolve = "ellma.core.evolution:evolve_cli"


[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["ellma"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".tox",
    ".venv",
    "*.egg-info"
]

[tool.pylint.messages_control]
disable = [
    "C0103",  # invalid-name
    "C0114",  # missing-module-docstring
    "R0903",  # too-few-public-methods
]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101"]

[tool.ruff.isort]
known-first-party = ["ellma"]