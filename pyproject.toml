[tool.poetry]
name = "ellma"
version = "0.1.16"
description = "Evolutionary Local LLM Agent - Self-improving AI assistant"
authors = ["Tom Sapletta <info@softreck.dev>"]
maintainers = ["WRONAI Team <contact@wronai.dev>"]
license = "Apache-2.0"
readme = "README.md"
packages = [{include = "ellma"}]

[tool.poetry.dependencies]
python = ">=3.10,<3.14"
click = "^8.0.0"
pyyaml = "^6.0"
requests = "^2.28.0"
rich = "^13.0.0"
jinja2 = "^3.1.0"
psutil = "^5.9.0"
llama-cpp-python = "^0.2.0"
numpy = ">=1.26.0"
prompt-toolkit = "^3.0.0"
importlib-metadata = {version = "^6.0.0", python = "<3.8"}
packaging = "^21.0"
setuptools = "^65.5.0"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/wronai/ellma/issues"
Changelog = "https://github.com/wronai/ellma/blob/main/CHANGELOG.md"
Homepage = "https://github.com/wronai/ellma"
Documentation = "https://wronai.github.io/ellma"
Repository = "https://github.com/wronai/ellma.git"
Source = "https://github.com/wronai/ellma"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.extras]
security = ["cryptography", "pyjwt"]

[tool.bandit]
targets = ["ellma"]
recursive = true
skips = ["B101", "B104"]

[tool.safety]
ignore = ["51457", "44715", "51668"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-asyncio = "^0.20.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
black = "^22.0.0"
flake8 = "^5.0.0"
flake8-bugbear = "^23.0.0"
flake8-docstrings = "^1.7.0"
flake8-import-order = "^0.18.2"
mypy = "^0.991"
pre-commit = "^2.20.0"
safety = "^2.3.0"
bandit = "^1.7.0"
sphinx = "^7.0.0"
sphinx-rtd-theme = "^1.2.0"
sphinx-autodoc-typehints = "^1.22.0"
myst-parser = "^2.0.0"
sphinx-copybutton = "^0.5.0"
sphinxcontrib-mermaid = "^0.8.0"
sphinx-autobuild = "^2021.3.14"
tox = "^4.0.0"
invoke = "^2.0.0"
pip-tools = "^6.0.0"

[tool.poetry.group.web.dependencies]
fastapi = "^0.100.0"
uvicorn = {extras = ["standard"], version = "^0.23.0"}
websockets = "^11.0.0"
aiofiles = "^23.0.0"

[tool.poetry.group.audio.dependencies]
sounddevice = "^0.4.0"
scipy = "^1.9.0"
librosa = "^0.10.0"
whisper = "^1.0.0"

[tool.poetry.group.full.dependencies]
docker = "^6.0.0"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v -s"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_context = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = ["pytest"]
ignore_missing_imports = true

[tool.coverage.run]
source = ["ellma"]
omit = ["tests/*", "ellma/__main__.py"]
branch = true

[tool.coverage.report]
show_missing = true
fail_under = 80

[tool.pylint]
load-plugins = "pylint.extensions.docparams,pylint.extensions.docstyle"
disable = "C0114,C0115,C0116,R0903,R0913,R0901"
max-line-length = 88
max-args = 6
max-locals = 15
max-returns = 6
max-branches = 12
max-statements = 50
max-attributes = 15
max-public-methods = 20
max-module-lines = 1000
max-method-args = 5
max-nested-blocks = 5
max-parents = 7
max-similarity-lines = 10

[tool.pylint.messages_control]
disable = [
    "C0103",  # invalid-name
    "C0114",  # missing-module-docstring
    "R0903",  # too-few-public-methods
    "R0902",  # too-many-instance-attributes
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
    "R0912",  # too-many-branches
    "R0911",  # too-many-return-statements
    "R0904",  # too-many-public-methods
    "W0613",  # unused-argument
    "W0703",  # broad-except
    "W0231",  # super-init-not-called
    "W0221",  # arguments-differ
    "W0235"   # useless-super-delegation
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 6
max-locals = 15
max-returns = 6
max-branches = 12
max-statements = 50
max-attributes = 15
max-public-methods = 20
max-module-lines = 1000
max-method-args = 5
max-nested-blocks = 5
max-parents = 7
max-similarity-lines = 10

[tool.pylint.typecheck]
generated-members = "pytest.*"

[tool.pylint.exceptions]
overgeneral-exceptions = "builtins.Exception,builtins.BaseException"
